// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	models "github.com/bgoldovsky/casher/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockusersRepository is a mock of usersRepository interface.
type MockusersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockusersRepositoryMockRecorder
}

// MockusersRepositoryMockRecorder is the mock recorder for MockusersRepository.
type MockusersRepositoryMockRecorder struct {
	mock *MockusersRepository
}

// NewMockusersRepository creates a new mock instance.
func NewMockusersRepository(ctrl *gomock.Controller) *MockusersRepository {
	mock := &MockusersRepository{ctrl: ctrl}
	mock.recorder = &MockusersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersRepository) EXPECT() *MockusersRepositoryMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockusersRepository) Auth(login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockusersRepositoryMockRecorder) Auth(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockusersRepository)(nil).Auth), login)
}

// Create mocks base method.
func (m *MockusersRepository) Create(user *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockusersRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockusersRepository)(nil).Create), user)
}

// Get mocks base method.
func (m *MockusersRepository) Get(userID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockusersRepositoryMockRecorder) Get(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockusersRepository)(nil).Get), userID)
}

// MockoperationsRepository is a mock of operationsRepository interface.
type MockoperationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockoperationsRepositoryMockRecorder
}

// MockoperationsRepositoryMockRecorder is the mock recorder for MockoperationsRepository.
type MockoperationsRepositoryMockRecorder struct {
	mock *MockoperationsRepository
}

// NewMockoperationsRepository creates a new mock instance.
func NewMockoperationsRepository(ctrl *gomock.Controller) *MockoperationsRepository {
	mock := &MockoperationsRepository{ctrl: ctrl}
	mock.recorder = &MockoperationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoperationsRepository) EXPECT() *MockoperationsRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockoperationsRepository) Get(userID, page, size int64) (*models.OperationPaginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, page, size)
	ret0, _ := ret[0].(*models.OperationPaginator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockoperationsRepositoryMockRecorder) Get(userID, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockoperationsRepository)(nil).Get), userID, page, size)
}
